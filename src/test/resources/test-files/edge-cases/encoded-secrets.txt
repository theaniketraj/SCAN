# Encoded Secrets Test File
# This file contains secrets that have been encoded or obfuscated in various ways
# Used for testing the SCAN plugin's ability to detect non-plaintext secrets
# WARNING: These are test secrets - DO NOT use in production!

# Base64 Encoded Secrets
# =====================

# Base64 encoded AWS access key: AKIAIOSFODNN7EXAMPLE
aws_access_key_b64=QUtJQUlPU0ZPRE5ON0VYQU1QTEU=

# Base64 encoded AWS secret key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
aws_secret_key_b64=d0phbHJYVXRuRkVNSS9LN01ERU5HL2JQeFJmaUNZRVhBTVBMRUtFWQ==

# Base64 encoded GitHub token: ghp_1234567890abcdef1234567890abcdef12345678
github_token_b64=Z2hwXzEyMzQ1Njc4OTBhYmNkZWYxMjM0NTY3ODkwYWJjZGVmMTIzNDU2Nzg=

# Base64 encoded database password: SuperSecretPassword123!
db_password_b64=U3VwZXJTZWNyZXRQYXNzd29yZDEyMyE=

# Base64 encoded Stripe API key: sk_live_1234567890abcdef1234567890abcdef
stripe_key_b64=c2tfbGl2ZV8xMjM0NTY3ODkwYWJjZGVmMTIzNDU2Nzg5MGFiY2RlZg==

# Hex Encoded Secrets
# ==================

# Hex encoded API key: my_secret_api_key_2023
api_key_hex=6d795f7365637265745f6170695f6b65795f32303233

# Hex encoded JWT secret: jwt_super_secret_key_for_signing_tokens_2023
jwt_secret_hex=6a77745f73757065725f7365637265745f6b65795f666f725f7369676e696e675f746f6b656e735f32303233

# Hex encoded encryption key: AES256_ENCRYPTION_KEY_FOR_PRODUCTION
encryption_key_hex=4145533235365f454e4352595054494f4e5f4b45595f464f525f50524f44554354494f4e

# URL Encoded Secrets
# ==================

# URL encoded connection string with password
# Original: mongodb://admin:MyP@ssw0rd!@cluster.mongodb.net/production
mongo_url_encoded=mongodb%3A//admin%3AMyP%40ssw0rd%21%40cluster.mongodb.net/production

# URL encoded Redis URL with password
# Original: redis://user:Redis#Pass123@redis-server:6379/0
redis_url_encoded=redis%3A//user%3ARedis%23Pass123%40redis-server%3A6379/0

# ROT13 Encoded Secrets (Simple Caesar Cipher)
# ============================================

# ROT13 encoded password: DatabasePassword2023
# Encoded: QngnonfrCnffjbeq2023
db_pass_rot13=QngnonfrCnffjbeq2023

# ROT13 encoded API key: ProductionApiKey2023
# Encoded: CebqhpgvbaNCvXrl2023
prod_api_rot13=CebqhpgvbaNCvXrl2023

# Multiple Encoding Layers
# ========================

# Base64 encoded, then hex encoded AWS key
# Original: AKIAIOSFODNN7EXAMPLE
# Base64: QUtJQUlPU0ZPRE5ON0VYQU1QTEU=
# Then Hex: 51557470514556415532395454304A7652455235546A645361475534513339515758415551395246526C553D
aws_double_encoded=51557470514556415532395454304A7652455235546A645361475534513339515758415251395246526C553D

# Base64 of JSON containing secrets
# Original JSON: {"api_key":"sk_test_123456789","db_pass":"admin123","jwt_secret":"my_jwt_key"}
json_secrets_b64=eyJhcGlfa2V5Ijoic2tfdGVzdF8xMjM0NTY3ODkiLCJkYl9wYXNzIjoiYWRtaW4xMjMiLCJqd3Rfc2VjcmV0IjoibXlfand0X2tleSJ9

# Obfuscated Secrets
# =================

# Secrets split across lines (to avoid simple pattern matching)
split_secret_part1=sk_live_1234567890
split_secret_part2=abcdef1234567890abcdef

# Secrets with extra characters/formatting
formatted_key=sk-test-1234-5678-90ab-cdef-1234-5678-90ab-cdef

# Secrets with whitespace and newlines
multiline_secret=-----BEGIN RSA PRIVATE KEY-----\nMIIEpA
IBAAKCAQEAy8Dbv8prpJ/0kKhlGeJYozo2t60EG8L0561g13R29LvMR5hy\nvGI4RkIe
nR6sy6jejbdJJQ==\n-----END RSA PRIVATE KEY-----

# Reversed Strings (Simple Obfuscation)
# ====================================

# Reversed GitHub token: ghp_abcdef1234567890abcdef1234567890abcdef12
reversed_github=21fedbca0987654321fedbca0987654321fedcba_phg

# Reversed database password: password123!@#
reversed_db_pass=!321drowssap

# Caesar Cipher Variants
# =====================

# Caesar cipher (shift 3): SECRETAPIKEY -> VHFUHWDSLNHB
caesar_3_key=VHFUHWDSLNHB

# Caesar cipher (shift 13): PRODUCTION_KEY -> CEBQHPGVBA_XRL
caesar_13_key=CEBQHPGVBA_XRL

# Custom Encoding Schemes
# ======================

# Every other character reversed: "my_api_key_123" -> "ym_ipa_eyk_321"
custom_encoded_1=ym_ipa_eyk_321

# Characters replaced with numbers: a=1, e=3, i=5, o=7, u=9
# "super_secret_code" -> "s9p3r_s3cr3t_c7d3"
char_replaced=s9p3r_s3cr3t_c7d3

# Environment Variable Style (Often Contains Secrets)
# ==================================================

# These patterns often contain secrets in environment files
export AWS_ACCESS_KEY=QUtJQUlPU0ZPRE5ON0VYQU1QTEU=
export DATABASE_URL=cG9zdGdyZXNxbDovL3VzZXI6cGFzcw==
export STRIPE_SECRET=c2tfc2VjcmV0XzEyMzQ1Njc4OTA=
export JWT_SECRET=and0X3NlY3JldF9rZXlfMjAyMw==

# Docker/Kubernetes Secret Formats
# ================================

# Base64 encoded secrets (common in k8s secrets)
SECRET_1: YWRtaW46cGFzc3dvcmQ=
SECRET_2: c3VwZXJfc2VjcmV0X2tleQ==
SECRET_3: ZGF0YWJhc2VfcGFzc3dvcmQ=

# Configuration File Formats with Encoded Values
# ==============================================

[database]
host=localhost
username=admin
# Base64 encoded password: DatabasePass123
password=RGF0YWJhc2VQYXNzMTIz

[api]
endpoint=https://api.example.com
# Hex encoded API key
key=6170695f6b65795f666f725f70726f64756374696f6e

[encryption]
# Base64 encoded AES key
aes_key=MTIzNDU2Nzg5MGFiY2RlZjEyMzQ1Njc4OTBhYmNkZWY=

# JSON Web Token (JWT) Secrets
# ============================

# Base64 encoded JWT signing key
jwt.secret=and0X3NpZ25pbmdfczNjcjN0X2tAeTo=

# Base64 encoded JWT payload containing sensitive info
# Original: {"sub":"admin","role":"superuser","secret":"admin_secret_key"}
jwt_payload=eyJzdWIiOiJhZG1pbiIsInJvbGUiOiJzdXBlcnVzZXIiLCJzZWNyZXQiOiJhZG1pbl9zZWNyZXRfa2V5In0=

# Encrypted/Encoded Configuration Blocks
# =====================================

# Simulated encrypted configuration (Base64 of fake encrypted data)
encrypted_config=VTJGc2RHVmtYMTh4TnpkOGVtOW5abVZzYVc1bFgzTjFjR1Z5WDNObFkzSmxkRjlqYjI1bWFXZGZZbXh2WTJ0ZlptOXlYM1JsYzNScGJtZGZjSFZ5Y0c5elpYTT0=

# Base64 encoded private key (truncated for brevity)
private_key_b64=TFMwdExTMUNSVWRKVGlCU1UwRWdVRkpKVmtGVVJTQkxSVmt0TFMwdExRcE5TVGxGY0VsQ1FVRkJTME5CUVVGQ1RsVkJSa0ZFVTA1bVJHMVJVR2xRWTNGUGJrRXpZV0Y1UkRsT2VsbDBURWc1VEc1cVdGRklaM1ZNU3psUWJHMXNZa0ZvTkU1d1JXSUtSVEJYVlVkVVVrbGxibEkyYzNrcGFtcGlaRzFLU2xGOVBRPT0=

# Multiple encoding example: 
# Original secret: stripe_live_key_abcdef123456
# Step 1 ROT13: fgevcr_yvir_xrl_nopqrs123456
# Step 2 Base64: WmdKbGNuVmZiR2xqWldWZmVHVnVYMkZpWTJSbFpqRXlNelExTmc9PQ==
multi_encoded_stripe=WmdKbGNuVmZiR2xqWldWZmVHVnVYMkZpWTJSbFpqRXlNelExTmc5PQ==

# Common patterns that might be missed by simple regex
# ===================================================

# API key split with concatenation
api_part_1=sk_live_
api_part_2=1234567890abcdef1234567890abcdef
# When concatenated: sk_live_1234567890abcdef1234567890abcdef

# Base64 with line breaks (common in certificates)
cert_key=LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t
  MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC7
  VJTUt9Us8cKBwko6CwBKbJ65GfCrYvCouiIPHfA0p8/rP6RTwBa
  MS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQ==

# Password in connection string with special characters encoded
# Original: postgres://user:P@$$w0rd!@host:5432/db
postgres_conn=cG9zdGdyZXM6Ly91c2VyOlBAJCR3MHJkIUBob3N0OjU0MzIvZGI=